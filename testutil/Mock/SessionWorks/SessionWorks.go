// Code generated by MockGen. DO NOT EDIT.
// Source: /home/roman.erema/go/src/wapi/src/Service/SessionWorks/Interface.go

// Package mock_SessionWorks is a generated GoMock package.
package mock_SessionWorks

import (
	gomock "github.com/golang/mock/gomock"
	Session "github.com/r-erema/wapi/src/Session"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// ReadSession mocks base method
func (m *MockInterface) ReadSession(sessionId string) (*Session.WapiSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSession", sessionId)
	ret0, _ := ret[0].(*Session.WapiSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSession indicates an expected call of ReadSession
func (mr *MockInterfaceMockRecorder) ReadSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSession", reflect.TypeOf((*MockInterface)(nil).ReadSession), sessionId)
}

// WriteSession mocks base method
func (m *MockInterface) WriteSession(session *Session.WapiSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSession indicates an expected call of WriteSession
func (mr *MockInterfaceMockRecorder) WriteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSession", reflect.TypeOf((*MockInterface)(nil).WriteSession), session)
}

// GetAllSavedSessionIds mocks base method
func (m *MockInterface) GetAllSavedSessionIds() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSavedSessionIds")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSavedSessionIds indicates an expected call of GetAllSavedSessionIds
func (mr *MockInterfaceMockRecorder) GetAllSavedSessionIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSavedSessionIds", reflect.TypeOf((*MockInterface)(nil).GetAllSavedSessionIds))
}

// RemoveSession mocks base method
func (m *MockInterface) RemoveSession(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession
func (mr *MockInterfaceMockRecorder) RemoveSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockInterface)(nil).RemoveSession), sessionId)
}
