// Code generated by MockGen. DO NOT EDIT.
// Source: /home/roman.erema/go/src/wapi/src/Service/Auth/Interface.go

// Package mock_Auth is a generated GoMock package.
package mock_Auth

import (
	go_whatsapp "github.com/Rhymen/go-whatsapp"
	gomock "github.com/golang/mock/gomock"
	Session "github.com/r-erema/wapi/src/Session"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockInterface) Login(sessionId string) (*go_whatsapp.Conn, *Session.WapiSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", sessionId)
	ret0, _ := ret[0].(*go_whatsapp.Conn)
	ret1, _ := ret[1].(*Session.WapiSession)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Login indicates an expected call of Login
func (mr *MockInterfaceMockRecorder) Login(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockInterface)(nil).Login), sessionId)
}
