// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/session/repository.go

// Package mock_session is a generated GoMock package.
package mock_session

import (
	gomock "github.com/golang/mock/gomock"
	session "github.com/r-erema/wapi/internal/model/session"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ReadSession mocks base method
func (m *MockRepository) ReadSession(sessionId string) (*session.WapiSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSession", sessionId)
	ret0, _ := ret[0].(*session.WapiSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSession indicates an expected call of ReadSession
func (mr *MockRepositoryMockRecorder) ReadSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSession", reflect.TypeOf((*MockRepository)(nil).ReadSession), sessionId)
}

// WriteSession mocks base method
func (m *MockRepository) WriteSession(session *session.WapiSession) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSession", session)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSession indicates an expected call of WriteSession
func (mr *MockRepositoryMockRecorder) WriteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSession", reflect.TypeOf((*MockRepository)(nil).WriteSession), session)
}

// GetAllSavedSessionIds mocks base method
func (m *MockRepository) GetAllSavedSessionIds() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSavedSessionIds")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSavedSessionIds indicates an expected call of GetAllSavedSessionIds
func (mr *MockRepositoryMockRecorder) GetAllSavedSessionIds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSavedSessionIds", reflect.TypeOf((*MockRepository)(nil).GetAllSavedSessionIds))
}

// RemoveSession mocks base method
func (m *MockRepository) RemoveSession(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession
func (mr *MockRepositoryMockRecorder) RemoveSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockRepository)(nil).RemoveSession), sessionId)
}
