// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/supervisor/connection.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	supervisor "github.com/r-erema/wapi/internal/service/supervisor"
	reflect "reflect"
)

// MockConnections is a mock of Connections interface
type MockConnections struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionsMockRecorder
}

// MockConnectionsMockRecorder is the mock recorder for MockConnections
type MockConnectionsMockRecorder struct {
	mock *MockConnections
}

// NewMockConnections creates a new mock instance
func NewMockConnections(ctrl *gomock.Controller) *MockConnections {
	mock := &MockConnections{ctrl: ctrl}
	mock.recorder = &MockConnectionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnections) EXPECT() *MockConnectionsMockRecorder {
	return m.recorder
}

// AddAuthenticatedConnectionForSession mocks base method
func (m *MockConnections) AddAuthenticatedConnectionForSession(sessionID string, sessConnDTO *supervisor.SessionConnectionDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthenticatedConnectionForSession", sessionID, sessConnDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthenticatedConnectionForSession indicates an expected call of AddAuthenticatedConnectionForSession
func (mr *MockConnectionsMockRecorder) AddAuthenticatedConnectionForSession(sessionID, sessConnDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthenticatedConnectionForSession", reflect.TypeOf((*MockConnections)(nil).AddAuthenticatedConnectionForSession), sessionID, sessConnDTO)
}

// RemoveConnectionForSession mocks base method
func (m *MockConnections) RemoveConnectionForSession(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveConnectionForSession", sessionID)
}

// RemoveConnectionForSession indicates an expected call of RemoveConnectionForSession
func (mr *MockConnectionsMockRecorder) RemoveConnectionForSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConnectionForSession", reflect.TypeOf((*MockConnections)(nil).RemoveConnectionForSession), sessionID)
}

// AuthenticatedConnectionForSession mocks base method
func (m *MockConnections) AuthenticatedConnectionForSession(sessionID string) (*supervisor.SessionConnectionDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticatedConnectionForSession", sessionID)
	ret0, _ := ret[0].(*supervisor.SessionConnectionDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticatedConnectionForSession indicates an expected call of AuthenticatedConnectionForSession
func (mr *MockConnectionsMockRecorder) AuthenticatedConnectionForSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticatedConnectionForSession", reflect.TypeOf((*MockConnections)(nil).AuthenticatedConnectionForSession), sessionID)
}
