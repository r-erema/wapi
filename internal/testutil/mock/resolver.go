// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/resolver.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockQRFileResolver is a mock of QRFileResolver interface
type MockQRFileResolver struct {
	ctrl     *gomock.Controller
	recorder *MockQRFileResolverMockRecorder
}

// MockQRFileResolverMockRecorder is the mock recorder for MockQRFileResolver
type MockQRFileResolverMockRecorder struct {
	mock *MockQRFileResolver
}

// NewMockQRFileResolver creates a new mock instance
func NewMockQRFileResolver(ctrl *gomock.Controller) *MockQRFileResolver {
	mock := &MockQRFileResolver{ctrl: ctrl}
	mock.recorder = &MockQRFileResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQRFileResolver) EXPECT() *MockQRFileResolverMockRecorder {
	return m.recorder
}

// ResolveQrFilePath mocks base method
func (m *MockQRFileResolver) ResolveQrFilePath(sessionID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveQrFilePath", sessionID)
	ret0, _ := ret[0].(string)
	return ret0
}

// ResolveQrFilePath indicates an expected call of ResolveQrFilePath
func (mr *MockQRFileResolverMockRecorder) ResolveQrFilePath(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveQrFilePath", reflect.TypeOf((*MockQRFileResolver)(nil).ResolveQrFilePath), sessionID)
}
