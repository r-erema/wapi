// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/message/listener.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	sync "sync"
)

// MockListener is a mock of Listener interface
type MockListener struct {
	ctrl     *gomock.Controller
	recorder *MockListenerMockRecorder
}

// MockListenerMockRecorder is the mock recorder for MockListener
type MockListenerMockRecorder struct {
	mock *MockListener
}

// NewMockListener creates a new mock instance
func NewMockListener(ctrl *gomock.Controller) *MockListener {
	mock := &MockListener{ctrl: ctrl}
	mock.recorder = &MockListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockListener) EXPECT() *MockListenerMockRecorder {
	return m.recorder
}

// ListenForSession mocks base method
func (m *MockListener) ListenForSession(sessionID string, wg *sync.WaitGroup) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForSession", sessionID, wg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenForSession indicates an expected call of ListenForSession
func (mr *MockListenerMockRecorder) ListenForSession(sessionID, wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForSession", reflect.TypeOf((*MockListener)(nil).ListenForSession), sessionID, wg)
}
